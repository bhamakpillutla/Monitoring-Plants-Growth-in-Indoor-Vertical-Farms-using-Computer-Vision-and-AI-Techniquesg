#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 25 14:03:48 2021

@author: psych256lab
"""
import os
import cv2
import numpy as np
import glob
from google.colab.patches import cv2_imshow
from PIL import Image
import regex as re
from datetime import datetime
from math import sqrt

import imantics
from imantics import Polygons, Mask
import matplotlib.pyplot as plt


# Reading files and sorting them in the right order

all_images = [file_name for file_name in glob.glob('/home/psych256lab/Downloads/centroid_test/binary_results/*.jpg') ]
all_images.sort(key=lambda k: k.split(".")[0][-1])
print(all_images) # 

# Initially, no centroid information is available. 
previous_centroid_x = -1
previous_centroid_y = -1
images = []
areas = []
def calc_distance(p1, p2): # simple function, I hope you are more comfortable 
  return sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2) # Pythagorean theorem
for i, image_name in enumerate(all_images):
    imageA = []
    imageArea = []
    rgb_image = cv2.imread(image_name)
    height, width = rgb_image.shape[:2]
    gray_image = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)
    ret, thresh = cv2.threshold(gray_image, 127, 255, 0)
    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)  
    blankImage = np.zeros_like(rgb_image)
    image_area = np.prod(rgb_image.shape)
    for i,cnt in enumerate(contours[::-1]):
        # Refer to https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_contours/py_contour_features/py_contour_features.html#moments
        M = cv2.moments(cnt)
        if M["m00"] != 0:
          cX = int(M["m10"] / M["m00"])
          cY = int(M["m01"] / M["m00"])
        else:
          cX, cY = 0, 0
        
        contour_area = cv2.contourArea(cnt)
        imageA.append((cX,cY))
        imageArea.append(contour_area)
        color = (0, 0, 255)
        cv2.drawContours(blankImage, [cnt], 0, color, -1) 
        cv2.circle(blankImage, (cX, cY), 3, (255, 0, 0), -1)

        # contour_area_pc = np.true_divide(int(contour_area),image_area)*100 if int(contour_area) > 1  else 0 
        # text = ' '.join(['Contour:',str(i),'Area:',str(round(contour_area,2)),'Percentage Area:',str(round(contour_area_pc,2))])
        # cv2.putText(blankImage,text,(10,60), cv2.FONT_HERSHEY_SIMPLEX, 1,(255),2,cv2.LINE_AA)
    
        # plt.imshow(blankImage, cmap = 'gray', interpolation = 'bicubic')
        # plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
        # plt.show()
   
    images.append(imageA)
    areas.append(imageArea)
    date = re.search(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}',image_name)    
    d = datetime.strptime(date.group(), '%Y-%m-%d %H:%M:%S')
    #d = datetime.strptime(date.group(), '%Y-%m-%d %H:%M:%S')
    #cv2.imwrite('/content/results/'+str(d)+".jpg",blankImage)

    #print("..")
    cv2_imshow(blankImage)
    cv2.imwrite('/home/psych256lab/Downloads/centroid_test/results/'+str(d)+".jpg",blankImage)
print(images)
print(areas)
for i,a in zip(images, areas):
  print("image starts/ends")
  for j,k in zip(i,a):
    print("centroid point :",j,": area:",k)

try:
  for list_a,area1 in zip(range(0,len(images)),range(0,len(areas))):
    print(list_a,area1)
    print("centroids:",images[list_a],":areas:",areas[area1])
    for var_list_a,a1 in zip(images[list_a],areas[area1]):
      #print(var_list_a)
      x, y = var_list_a
      #print("\n FIXED X AND Y: ",x,y)
    
      for var_list_b,a2 in zip(images[list_a+1],areas[area1+1]):
        #print(var_list_b)
        x_new, y_new = var_list_b
        #print("\nnew point is: ",x_new,y_new)

        distance = calc_distance((x,y), (x_new,y_new) ) 
        #difference = distance.euclidean((x,y), (x_new,y_new))
        #print("\ndistance is : ",distance)
        if (distance == 0 or distance <=10):
          print("\n FIXED X AND Y: ",x,y)
          print("\nnew point is: ",x_new,y_new)
          print("leaves have same centroid")
          print("Areas are:",a1,a2)
except:
  pass
  
          
          


        
    